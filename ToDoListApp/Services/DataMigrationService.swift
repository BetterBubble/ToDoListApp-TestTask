//
//  DataMigrationService.swift
//  ToDoListApp
//

import Foundation

/// –°–µ—Ä–≤–∏—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
/// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ Core Data
/// –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility (S –≤ SOLID)
final class DataMigrationService {

    // MARK: - Properties

    private let apiService: APIServiceProtocol
    private let repository: TaskRepositoryProtocol

    // MARK: - Init

    init(
        apiService: APIServiceProtocol = APIService(),
        repository: TaskRepositoryProtocol = CoreDataTaskRepository()
    ) {
        self.apiService = apiService
        self.repository = repository

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        setupNotificationObserver()
    }

    // MARK: - Private Methods

    private func setupNotificationObserver() {
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(handleFirstLaunch),
            name: .shouldLoadInitialData,
            object: nil
        )
    }

    @objc private func handleFirstLaunch() {
        loadInitialDataFromAPI()
    }

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
    func loadInitialDataFromAPI() {
        print("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ API...")

        apiService.fetchTasks { [weak self] result in
            switch result {
            case .success(let apiTasks):
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(apiTasks.count) –∑–∞–¥–∞—á –∏–∑ API")
                self?.convertAndSaveTasks(apiTasks)

            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ API: \(error.localizedDescription)")
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                self?.createDemoTasks()
            }
        }
    }

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ API —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
    private func convertAndSaveTasks(_ apiTasks: [APITask]) {
        let domainTasks = apiTasks.map { apiTask in
            Task(
                id: UUID(),
                title: apiTask.todo,
                isCompleted: apiTask.completed,
                createdAt: Date()
            )
        }

        repository.saveTasksFromAPI(domainTasks) { result in
            switch result {
            case .success:
                print("‚úÖ –ó–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Core Data")
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                NotificationCenter.default.post(
                    name: .dataDidLoad,
                    object: nil
                )

            case .failure(let error):
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Core Data: \(error.localizedDescription)")
            }
        }
    }

    /// –°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ-–∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ API
    private func createDemoTasks() {
        let demoTasks = [
            Task(title: "–ò–∑—É—á–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É VIPER", isCompleted: false),
            Task(title: "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Core Data", isCompleted: true),
            Task(title: "–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ API", isCompleted: false),
            Task(title: "–ù–∞–ø–∏—Å–∞—Ç—å —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã", isCompleted: false),
            Task(title: "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞—á–∞–º", isCompleted: false)
        ]

        repository.saveTasksFromAPI(demoTasks) { result in
            switch result {
            case .success:
                print("‚úÖ –î–µ–º–æ-–∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã")
                NotificationCenter.default.post(
                    name: .dataDidLoad,
                    object: nil
                )

            case .failure(let error):
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–∑–∞–¥–∞—á–∏: \(error.localizedDescription)")
            }
        }
    }

    // MARK: - Deinit

    deinit {
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - Notifications

extension Notification.Name {
    static let dataDidLoad = Notification.Name("dataDidLoad")
}